#include "TObject.h"

#ifndef ND__TTrueVertex_h
#define ND__TTrueVertex_h
namespace ND {
    class TTrueVertex;
} // end of namespace.

#include "TLorentzVector.h"

namespace ND {
    class TTrueVertex : public TObject {
        
    public:
        // Nested classes declaration.
        
    public:
        // Data Members.
        TLorentzVector Position;    //
        Int_t          ID;          //
        double         Pur;         //
        double         Eff;         //
        
        TTrueVertex();
        TTrueVertex(const TTrueVertex & );
        virtual ~TTrueVertex();
        
        ClassDef(TTrueVertex,2); // Generated by MakeProject.
    };
} // namespace
#endif

#ifndef ND__TTrueParticle_h
#define ND__TTrueParticle_h
namespace ND {
    class TTrueParticle;
} // end of namespace.

//#include "TObject.h"
//#include "ND__TTrueVertex.h"

namespace ND {
    class TTrueParticle : public TObject {
        
    public:
        // Nested classes declaration.
        
    public:
        // Data Members.
        int         ID;          ///< Trajectoy  Id
        double      Pur;         ///< The purity for matching the rec particle with the true particle
        double      Eff;         ///< The efficiency for matching the rec particle with the true particle
        ND::TTrueVertex Vertex;      ///< True vertex associated to this TrueParticle
        
        TTrueParticle();
        TTrueParticle(const TTrueParticle & );
        virtual ~TTrueParticle();
        
        ClassDef(TTrueParticle,2); // Generated by MakeProject.
    };
} // namespace
#endif

#ifndef ND__TTrueParticle_cxx
#define ND__TTrueParticle_cxx
ND::TTrueParticle::TTrueParticle() {
}
ND::TTrueParticle::TTrueParticle(const TTrueParticle & rhs)
: TObject(const_cast<TTrueParticle &>( rhs ))
, ID(const_cast<TTrueParticle &>( rhs ).ID)
, Pur(const_cast<TTrueParticle &>( rhs ).Pur)
, Eff(const_cast<TTrueParticle &>( rhs ).Eff)
, Vertex(const_cast<TTrueParticle &>( rhs ).Vertex)
{
    // This is NOT a copy constructor. This is actually a move constructor (for stl container's sake).
    // Use at your own risk!
    if (&rhs) {} // avoid warning about unused parameter
}
ND::TTrueParticle::~TTrueParticle() {
}
#endif // ND__TTrueParticle_cxx
